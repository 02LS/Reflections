Lesson_2_reflections.txt

4. Reflect: Initializing a Repository
What happens when you initialize a repository? Why do you need to do it? When you initialize a repository, you are creating a group of files that git is tracking every time you save a commit. You need to do this because you can't save commits without initializing a repository. Commits are extremely useful and should be used.

7. Reflect: Staging Area
How is the staging area different from the working directory and the repository? What value do you think it offers? The staging area is a sort of waiting room, where files selected can be put into a commit. It is valuable because this lets commits be only certain files, which is a way to only commit files that were changed. This makes it easier during bug fixing and saves space.

12. Reflect: Commit Size
How can you use the staging area to make sure you have one commit per logical change? You can choose what files to commit, which lets you choose the files that were changed and commit them. This makes it so unless a human makes an error, the commits are saved logically.

13.Reflect: When to Use Branches
What are some situations when branches would be helpful in keeping your history organized? How would branches help? IBranches would be helpful when I want to make an experimental change to my project, or when I want to add something to the project but aren't sure if the path I'm taking is completeable. Branches would help by making new commits detached from the master branch. This allows me to make changes without fear, and possibly merge the code later on if all goes well in the branch. 

20. Reflect: Visualizing with Diagrams
How do the diagrams help you visualize the branch structure? They help me understand how commits are connected by branches. The diagrams I used are ones based off a tree and ones based off roots, since they were the easiest to understand.